// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cache "github.com/prashanthpai/sqlcache/cache"

	mock "github.com/stretchr/testify/mock"

	time "time"
	"context"
)

// Cacher is an autogenerated mock type for the Cacher type
type Cacher struct {
	mock.Mock
}

<<<<<<< HEAD
// Get provides a mock function with given fields: key
func (_m *Cacher) Get(ctx context.Context, key string) (*cache.Item, bool, error) {
	ret := _m.Called(key)
=======
// Get provides a mock function with given fields: ctx, key
func (_m *Cacher) Get(ctx context.Context, key string) (*cache.Item, bool, error) {
	ret := _m.Called(ctx, key)
>>>>>>> 8450dfa5fd401cfb852fbdf10b58b600f0764efa

	var r0 *cache.Item
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cache.Item, bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cache.Item); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

<<<<<<< HEAD
// Set provides a mock function with given fields: key, item, ttl
func (_m *Cacher) Set(ctx context.Context, key string, item *cache.Item, ttl time.Duration) error {
	ret := _m.Called(key, item, ttl)
=======
// Set provides a mock function with given fields: ctx, key, item, ttl
func (_m *Cacher) Set(ctx context.Context, key string, item *cache.Item, ttl time.Duration) error {
	ret := _m.Called(ctx, key, item, ttl)
>>>>>>> 8450dfa5fd401cfb852fbdf10b58b600f0764efa

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *cache.Item, time.Duration) error); ok {
		r0 = rf(ctx, key, item, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCacher interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacher creates a new instance of Cacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacher(t mockConstructorTestingTNewCacher) *Cacher {
	mock := &Cacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
